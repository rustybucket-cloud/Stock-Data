{
  "version": 3,
  "sources": ["../../__tests__/monthlyHistory.test.ts"],
  "sourcesContent": ["import { MonthHistory, convertResponseData } from \"../utils/monthlyHistory\";\n\nconst mockData = [\n  {\n    date: \"03/2022\",\n    open: 100,\n    close: 110,\n    high: 120,\n    low: 90,\n    volume: 1000\n  },\n  {\n    date: \"02/2022\",\n    open: 80,\n    close: 90,\n    high: 110,\n    low: 70,\n    volume: 1000\n  },\n  {\n    date: \"01/2022\",\n    open: 70,\n    close: 80,\n    high: 100,\n    low: 70,\n    volume: 1000\n  },\n  {\n    date: \"12/2021\",\n    open: 50,\n    close: 70,\n    high: 100,\n    low: 50,\n    volume: 1000\n  }\n]\nconst mockObject = new MonthHistory(mockData)\n\ntest(\"Calculates the average\", () => {\n  // arrange\n  const expectedValue = 87.50\n\n  // act\n  const actualValue = mockObject.average()\n\n  // assertions\n  expect(actualValue).toBe(actualValue)\n})\n\ntest(\"Calculate high and low\", () => {\n  // arrange\n  const expectedLow = { \"date\": \"12/2021\", price: 50 }\n  const expectedHigh = { \"date\": \"03/2022\", price: 120 }\n\n  // act \n  const actualHigh = mockObject.high()\n  const actualLow = mockObject.low()\n\n  // assert\n  expect(actualHigh).toEqual(expectedHigh)\n  expect(actualLow).toEqual(expectedLow)\n})\n\ntest(\"Get the start and end\", () => {\n  // arrange\n  const expectedStart = { price: 50, date: \"12/2021\" }\n  const expectedEnd = { price: 110, date: \"03/2022\" }\n\n  // act\n  const actualStart = mockObject.start()\n  const actualEnd = mockObject.end()\n\n  // assert\n  expect(actualStart).toEqual(expectedStart)\n  expect(actualEnd).toEqual(expectedEnd)\n})\n\ntest(\"Find the month with the highest change of price\", () => {\n  // arrange\n  const expectedValue = { change: 20, date: \"12/2021\" }\n\n  // act\n  const actualValue = mockObject.largestChange()\n\n  // assert\n  expect(actualValue).toEqual(expectedValue)\n})\n\ntest(\"Calculate the value that an investment would have had\", () => {\n  // arrange\n  const validStartingInvestment = 10000\n  const validStartMonth = \"12/2021\"\n  const validEndMonth = \"03/2022\"\n  const expectedValidEndValue = 22000\n\n  // act\n  const actualValue = mockObject.calculatePastInvestment({amount: validStartingInvestment, start: validStartMonth, end: validEndMonth})\n\n  // assetions\n  expect(actualValue).toBe(expectedValidEndValue)\n})\n\ntest(\"Convert data from request\", () => {\n  // arrange\n  const mockRequest = {\n    \"Monthly Time Series\": {\n        \"2022-03-31\": {\n            \"1. open\": \"100\",\n            \"2. high\": \"120\",\n            \"3. low\": \"90\",\n            \"4. close\": \"110\",\n            \"5. volume\": \"1000\"\n        },\n        \"2022-02-28\": {\n            \"1. open\": \"80\",\n            \"2. high\": \"110\",\n            \"3. low\": \"70\",\n            \"4. close\": \"90\",\n            \"5. volume\": \"1000\"\n        },\n        \"2022-01-31\": {\n            \"1. open\": \"70\",\n            \"2. high\": \"100\",\n            \"3. low\": \"70\",\n            \"4. close\": \"80\",\n            \"5. volume\": \"1000\"\n        },\n        \"2021-12-31\": {\n            \"1. open\": \"50\",\n            \"2. high\": \"100\",\n            \"3. low\": \"50\",\n            \"4. close\": \"70\",\n            \"5. volume\": \"1000\"\n        }\n    }\n  }\n  const expectedValue = mockData\n\n  // act\n  const actualValue = convertResponseData(mockRequest)\n\n  // arrange\n  expect(actualValue).toEqual(expectedValue)\n})"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA,4BAAkD;AAElD,MAAM,WAAW;AAAA,EACf;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,OAAO;AAAA,IACP,MAAM;AAAA,IACN,KAAK;AAAA,IACL,QAAQ;AAAA;AAAA,EAEV;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,OAAO;AAAA,IACP,MAAM;AAAA,IACN,KAAK;AAAA,IACL,QAAQ;AAAA;AAAA,EAEV;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,OAAO;AAAA,IACP,MAAM;AAAA,IACN,KAAK;AAAA,IACL,QAAQ;AAAA;AAAA,EAEV;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,OAAO;AAAA,IACP,MAAM;AAAA,IACN,KAAK;AAAA,IACL,QAAQ;AAAA;AAAA;AAGZ,MAAM,aAAa,IAAI,mCAAa;AAEpC,KAAK,0BAA0B,MAAM;AAEnC,QAAM,gBAAgB;AAGtB,QAAM,cAAc,WAAW;AAG/B,SAAO,aAAa,KAAK;AAAA;AAG3B,KAAK,0BAA0B,MAAM;AAEnC,QAAM,cAAc,EAAE,QAAQ,WAAW,OAAO;AAChD,QAAM,eAAe,EAAE,QAAQ,WAAW,OAAO;AAGjD,QAAM,aAAa,WAAW;AAC9B,QAAM,YAAY,WAAW;AAG7B,SAAO,YAAY,QAAQ;AAC3B,SAAO,WAAW,QAAQ;AAAA;AAG5B,KAAK,yBAAyB,MAAM;AAElC,QAAM,gBAAgB,EAAE,OAAO,IAAI,MAAM;AACzC,QAAM,cAAc,EAAE,OAAO,KAAK,MAAM;AAGxC,QAAM,cAAc,WAAW;AAC/B,QAAM,YAAY,WAAW;AAG7B,SAAO,aAAa,QAAQ;AAC5B,SAAO,WAAW,QAAQ;AAAA;AAG5B,KAAK,mDAAmD,MAAM;AAE5D,QAAM,gBAAgB,EAAE,QAAQ,IAAI,MAAM;AAG1C,QAAM,cAAc,WAAW;AAG/B,SAAO,aAAa,QAAQ;AAAA;AAG9B,KAAK,yDAAyD,MAAM;AAElE,QAAM,0BAA0B;AAChC,QAAM,kBAAkB;AACxB,QAAM,gBAAgB;AACtB,QAAM,wBAAwB;AAG9B,QAAM,cAAc,WAAW,wBAAwB,EAAC,QAAQ,yBAAyB,OAAO,iBAAiB,KAAK;AAGtH,SAAO,aAAa,KAAK;AAAA;AAG3B,KAAK,6BAA6B,MAAM;AAEtC,QAAM,cAAc;AAAA,IAClB,uBAAuB;AAAA,MACnB,cAAc;AAAA,QACV,WAAW;AAAA,QACX,WAAW;AAAA,QACX,UAAU;AAAA,QACV,YAAY;AAAA,QACZ,aAAa;AAAA;AAAA,MAEjB,cAAc;AAAA,QACV,WAAW;AAAA,QACX,WAAW;AAAA,QACX,UAAU;AAAA,QACV,YAAY;AAAA,QACZ,aAAa;AAAA;AAAA,MAEjB,cAAc;AAAA,QACV,WAAW;AAAA,QACX,WAAW;AAAA,QACX,UAAU;AAAA,QACV,YAAY;AAAA,QACZ,aAAa;AAAA;AAAA,MAEjB,cAAc;AAAA,QACV,WAAW;AAAA,QACX,WAAW;AAAA,QACX,UAAU;AAAA,QACV,YAAY;AAAA,QACZ,aAAa;AAAA;AAAA;AAAA;AAIvB,QAAM,gBAAgB;AAGtB,QAAM,cAAc,+CAAoB;AAGxC,SAAO,aAAa,QAAQ;AAAA;",
  "names": []
}
