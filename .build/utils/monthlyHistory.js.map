{
  "version": 3,
  "sources": ["../../utils/monthlyHistory.ts"],
  "sourcesContent": ["import axios from \"axios\";\n\ntype PriceData = {\n  price: number,\n  date: string\n}\n\ntype MonthData = {\n  date: string,\n  open: number,\n  high: number,\n  low: number,\n  close: number,\n  volume: number\n}\n\ninterface RequestData {\n  \"Monthly Time Series\" : {\n    [key: string]: {\n      \"1. open\": string,\n      \"2. high\": string,\n      \"3. low\": string,\n      \"4. close\": string,\n      \"5. volume\": string\n    }\n  }\n}\n\nexport class MonthHistory {\n  private data: MonthData[]\n\n  constructor(data: MonthData[]) {\n    this.data = data\n  }\n\n  high() : PriceData {\n    let highestValue = { price: 0, date: \"\" }\n    this.data.forEach(month => {\n      if (month.high > highestValue.price) {\n        highestValue.price = month.high\n        highestValue.date = month.date\n      }\n    })\n    return highestValue\n  }\n  \n  low() : PriceData {\n    let lowestValue = { price: 100000000, date: \"\" }\n    this.data.forEach(month => {\n      if (month.low < lowestValue.price) {\n        lowestValue.price = month.low\n        lowestValue.date = month.date\n      }\n    })\n    return lowestValue\n  }\n\n  start() : PriceData {\n    const startMonth = this.data[this.data.length - 1]\n    return {\n      price: startMonth.open,\n      date: startMonth.date\n    }\n  }\n\n  end() : PriceData {\n    const endMonth = this.data[0]\n    return {\n      price: endMonth.close,\n      date: endMonth.date\n    }\n  }\n\n  average() : string {\n    const numberOfMonths = this.data.length\n    let total = 0\n    this.data.forEach(month => {\n      total += month.close\n    })\n    return (total / numberOfMonths).toFixed(2)\n  }\n\n  largestChange(): { change: number, date: string } {\n    let largestChange = { change: 0, date: \"\" }\n    this.data.forEach((month, i) => {\n      const change = month.close - month.open\n      const difference = Math.abs(change)\n      if(difference > Math.abs(largestChange.change)) {\n        largestChange.change = change\n        largestChange.date = month.date\n      }\n    })\n    return largestChange\n  }\n\n  calculatePastInvestment({amount, start, end} : { amount: number, start: string, end: string | null }) : number {\n    let startPrice = 0\n    let endPrice = 0\n    this.data.forEach((month) => {\n      if (month.date === start) startPrice = month.open\n      if (month.date === end) endPrice = month.close\n    })\n    if (!startPrice || !endPrice) return 0 \n    const sharesOwned = amount / startPrice\n    const endValue = sharesOwned * endPrice\n    return endValue\n  }\n}\n\nexport function convertResponseData(data: RequestData) : MonthData[] {\n  let monthObject = []\n  const months = data[\"Monthly Time Series\"]\n  for (const [key, value] of Object.entries(months)) {\n    const date = new Date(key)\n    const month = date.getMonth() + 1\n    let monthString = month.toString()\n    if (monthString.length === 1) monthString = `0${month}`\n    const dateString = `${monthString}/${date.getFullYear()}`\n    const object = {\n      date: dateString,\n      open: parseFloat(value[\"1. open\"]),\n      close: parseFloat(value[\"4. close\"]),\n      low: parseFloat(value[\"3. low\"]),\n      high: parseFloat(value[\"2. high\"]),\n      volume: parseFloat(value[\"5. volume\"])\n    }\n    monthObject.push(object)\n  }\n  return monthObject\n}\n\nexport async function monthlyHistory(stock : string) : Promise<MonthHistory> {\n  const url = `https://www.alphavantage.co/query?function=TIME_SERIES_MONTHLY&symbol=${stock}&apikey=${process.env['API_KEY']}`\n  const res = await axios.get(url)\n  const data = convertResponseData(res.data)\n  const history = new MonthHistory(data)\n  return history\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAkB;AA4BX,mBAAmB;AAAA,EAChB;AAAA,EAER,YAAY,MAAmB;AAC7B,SAAK,OAAO;AAAA;AAAA,EAGd,OAAmB;AACjB,QAAI,eAAe,EAAE,OAAO,GAAG,MAAM;AACrC,SAAK,KAAK,QAAQ,WAAS;AACzB,UAAI,MAAM,OAAO,aAAa,OAAO;AACnC,qBAAa,QAAQ,MAAM;AAC3B,qBAAa,OAAO,MAAM;AAAA;AAAA;AAG9B,WAAO;AAAA;AAAA,EAGT,MAAkB;AAChB,QAAI,cAAc,EAAE,OAAO,KAAW,MAAM;AAC5C,SAAK,KAAK,QAAQ,WAAS;AACzB,UAAI,MAAM,MAAM,YAAY,OAAO;AACjC,oBAAY,QAAQ,MAAM;AAC1B,oBAAY,OAAO,MAAM;AAAA;AAAA;AAG7B,WAAO;AAAA;AAAA,EAGT,QAAoB;AAClB,UAAM,aAAa,KAAK,KAAK,KAAK,KAAK,SAAS;AAChD,WAAO;AAAA,MACL,OAAO,WAAW;AAAA,MAClB,MAAM,WAAW;AAAA;AAAA;AAAA,EAIrB,MAAkB;AAChB,UAAM,WAAW,KAAK,KAAK;AAC3B,WAAO;AAAA,MACL,OAAO,SAAS;AAAA,MAChB,MAAM,SAAS;AAAA;AAAA;AAAA,EAInB,UAAmB;AACjB,UAAM,iBAAiB,KAAK,KAAK;AACjC,QAAI,QAAQ;AACZ,SAAK,KAAK,QAAQ,WAAS;AACzB,eAAS,MAAM;AAAA;AAEjB,WAAQ,SAAQ,gBAAgB,QAAQ;AAAA;AAAA,EAG1C,gBAAkD;AAChD,QAAI,gBAAgB,EAAE,QAAQ,GAAG,MAAM;AACvC,SAAK,KAAK,QAAQ,CAAC,OAAO,MAAM;AAC9B,YAAM,SAAS,MAAM,QAAQ,MAAM;AACnC,YAAM,aAAa,KAAK,IAAI;AAC5B,UAAG,aAAa,KAAK,IAAI,cAAc,SAAS;AAC9C,sBAAc,SAAS;AACvB,sBAAc,OAAO,MAAM;AAAA;AAAA;AAG/B,WAAO;AAAA;AAAA,EAGT,wBAAwB,EAAC,QAAQ,OAAO,OAAuE;AAC7G,QAAI,aAAa;AACjB,QAAI,WAAW;AACf,SAAK,KAAK,QAAQ,CAAC,UAAU;AAC3B,UAAI,MAAM,SAAS;AAAO,qBAAa,MAAM;AAC7C,UAAI,MAAM,SAAS;AAAK,mBAAW,MAAM;AAAA;AAE3C,QAAI,CAAC,cAAc,CAAC;AAAU,aAAO;AACrC,UAAM,cAAc,SAAS;AAC7B,UAAM,WAAW,cAAc;AAC/B,WAAO;AAAA;AAAA;AAIJ,6BAA6B,MAAiC;AACnE,MAAI,cAAc;AAClB,QAAM,SAAS,KAAK;AACpB,aAAW,CAAC,KAAK,UAAU,OAAO,QAAQ,SAAS;AACjD,UAAM,OAAO,IAAI,KAAK;AACtB,UAAM,QAAQ,KAAK,aAAa;AAChC,QAAI,cAAc,MAAM;AACxB,QAAI,YAAY,WAAW;AAAG,oBAAc,IAAI;AAChD,UAAM,aAAa,GAAG,eAAe,KAAK;AAC1C,UAAM,SAAS;AAAA,MACb,MAAM;AAAA,MACN,MAAM,WAAW,MAAM;AAAA,MACvB,OAAO,WAAW,MAAM;AAAA,MACxB,KAAK,WAAW,MAAM;AAAA,MACtB,MAAM,WAAW,MAAM;AAAA,MACvB,QAAQ,WAAW,MAAM;AAAA;AAE3B,gBAAY,KAAK;AAAA;AAEnB,SAAO;AAAA;AAGT,8BAAqC,OAAwC;AAC3E,QAAM,MAAM,yEAAyE,gBAAgB,QAAQ,IAAI;AACjH,QAAM,MAAM,MAAM,qBAAM,IAAI;AAC5B,QAAM,OAAO,oBAAoB,IAAI;AACrC,QAAM,UAAU,IAAI,aAAa;AACjC,SAAO;AAAA;",
  "names": []
}
