{
  "version": 3,
  "sources": ["../../utils/searchStock.ts"],
  "sourcesContent": ["import axios from \"axios\"\nimport readline from \"readline\";\nconst prompt = require('prompt-sync')()\n\nexport type Match = {\n  \"1. symbol\": string,\n  \"2. name\": string,\n  \"3. type\": string,\n  \"4. region\": string,\n  \"5. marketOpen\": string,\n  \"6. marketClose\": string,\n  \"7. timezone\": string,\n  \"8. currency\": string,\n  \"9. matchScore\": string\n}\n\ntype SearchResult = {\n  data: {\n    \"bestMatches\": Match[]\n  }\n}\n\nexport async function searchStock(search: string) : Promise<string> {\n  const matches = await request(search)\n  if (matches.length === 0) return \"No matching stock found\"\n  else {\n    const promptString = createPromptFromMatches(matches)\n    let choice : string\n    choice = prompt(promptString)\n    if (choice) {\n      const symbol = selectStockFromOptions(matches, choice)\n      return symbol \n    } else return \"Error\"\n  }\n}\n\nexport const request = async (search: string) : Promise<Match[]> => {\n  const url = `https://www.alphavantage.co/query?function=SYMBOL_SEARCH&keywords=${search}&apikey=${process.env['API_KEY']}`\n  let matches\n  try {\n    const data : SearchResult = await axios.get(url)\n    matches = data?.data[\"bestMatches\"]\n  } catch(err) {\n    console.error(err)\n    throw err\n  }\n  return matches\n}\n\nexport function createPromptFromMatches(matches: Match[]) : string {\n  let string = \"Did you mean:\\n\"\n  matches.forEach((match : Match, i) => {\n    string += match[\"2. name\"] + \"\\n\"\n  }) \n  string += \"$\\t\"\n  return string\n}\n\n/**\n* Asks user to select the correct stock\n* @params {Match[]} options Stocks that were fetched from API\n* @returns A string that is the symbol of desired stock\n*/\nexport function selectStockFromOptions(options: Match[], selection : string) : string {\n  let symbol = \"Stock not found\"\n  let isSymbolFound = false\n  options.forEach((option : Match) => {\n    if (!isSymbolFound) {\n      if (option['2. name'].toLowerCase() === selection.toLowerCase()) {\n        symbol = option['1. symbol']\n        isSymbolFound = true\n      }\n    }\n  })\n  return symbol\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAkB;AAElB,MAAM,SAAS,QAAQ;AAoBvB,2BAAkC,QAAkC;AAClE,QAAM,UAAU,MAAM,QAAQ;AAC9B,MAAI,QAAQ,WAAW;AAAG,WAAO;AAAA,OAC5B;AACH,UAAM,eAAe,wBAAwB;AAC7C,QAAI;AACJ,aAAS,OAAO;AAChB,QAAI,QAAQ;AACV,YAAM,SAAS,uBAAuB,SAAS;AAC/C,aAAO;AAAA;AACF,aAAO;AAAA;AAAA;AAIX,MAAM,UAAU,OAAO,WAAsC;AAClE,QAAM,MAAM,qEAAqE,iBAAiB,QAAQ,IAAI;AAC9G,MAAI;AACJ,MAAI;AACF,UAAM,OAAsB,MAAM,qBAAM,IAAI;AAC5C,cAAU,6BAAM,KAAK;AAAA,WACf,KAAN;AACA,YAAQ,MAAM;AACd,UAAM;AAAA;AAER,SAAO;AAAA;AAGF,iCAAiC,SAA2B;AACjE,MAAI,SAAS;AACb,UAAQ,QAAQ,CAAC,OAAe,MAAM;AACpC,cAAU,MAAM,aAAa;AAAA;AAE/B,YAAU;AACV,SAAO;AAAA;AAQF,gCAAgC,SAAkB,WAA6B;AACpF,MAAI,SAAS;AACb,MAAI,gBAAgB;AACpB,UAAQ,QAAQ,CAAC,WAAmB;AAClC,QAAI,CAAC,eAAe;AAClB,UAAI,OAAO,WAAW,kBAAkB,UAAU,eAAe;AAC/D,iBAAS,OAAO;AAChB,wBAAgB;AAAA;AAAA;AAAA;AAItB,SAAO;AAAA;",
  "names": []
}
